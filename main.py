# Code by: glinsky
# Made in December, 2022

import math, telebot, requests, time, random, wikipedia, qrcode

from telebot import types
from time import sleep
from datetime import datetime
from bs4 import BeautifulSoup
from pymongo import MongoClient

from database import *
from config import *

bot = telebot.TeleBot(BOT_TOKEN, parse_mode = None)

url = "https://mainfin.ru/currency/omsk"
request_get = requests.get(url)
soup = BeautifulSoup(request_get.text, "html.parser")
price_usd = soup.find("span", id="buy_usd").text
price_euro = soup.find("span", id="buy_eur").text

# Command - /start
@bot.message_handler(commands=['start'])
def start(message):
    global id, username, name, lastActive

    id = message.from_user.id
    username = message.from_user.username
    name = message.from_user.first_name
    lastActive = datetime.now()

    updateUser()

    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton("üßæ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
    item2 = types.KeyboardButton("üíé –§—É–Ω–∫—Ü–∏–∏")
    item3 = types.KeyboardButton("üõ† –ü—Ä–æ—á–µ–µ")
    markup.row(item1)
    markup.row(item2)
    markup.row(item3)
    bot.send_message(id, "–ü—Ä–∏–≤–µ—Ç " + name + " üëã" +", —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup = markup)

# Type - Text
@bot.message_handler(content_types = ["text"])
def bot_message(message):
    global id, username, name, lastActive

    id = message.from_user.id
    username = message.from_user.username
    name = message.from_user.first_name
    lastActive = datetime.now()

    if message.chat.type == "private":
        match message.text:
            case "üõ† –ü—Ä–æ—á–µ–µ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                item2 = types.KeyboardButton("üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è")
                item3 = types.KeyboardButton("üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()

            case "üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–î–∞ ‚úÖ")
                item2 = types.KeyboardButton("–ù–µ—Ç ‚õî")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é?", reply_markup = markup)

                updateUser()

            case "–î–∞ ‚úÖ":
                bot.send_message(id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —É–ª—É—á—à–µ–Ω–∏—è –≤ —á–∞—Ç! ‚§µÔ∏è")
                bot.register_next_step_handler(message, up_bot)

                updateUser()   

            case "–ù–µ—Ç ‚õî":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                item2 = types.KeyboardButton("üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è")
                item3 = types.KeyboardButton("üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()

            case "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üÜî –£–∑–Ω–∞—Ç—å ID")
                item2 = types.KeyboardButton("üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
                item3 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ü—Ä–æ—á–µ–µ")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()

            case "üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ":
                bot.send_message(id, "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏) üôÇ.\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - @disanaverno")
                
                updateUser()

            case "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üÜî –£–∑–Ω–∞—Ç—å ID")
                item2 = types.KeyboardButton("üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
                item3 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ü—Ä–æ—á–µ–µ")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()

            case "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ü—Ä–æ—á–µ–µ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                item2 = types.KeyboardButton("üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è")
                item3 = types.KeyboardButton("üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()

            case "üÜî –£–∑–Ω–∞—Ç—å ID":
                bot.send_message(id, "–í–∞—à ID - " + str(id))

                updateUser()

            case "üßæ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üßæ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
                item2 = types.KeyboardButton("üßæ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä")
                item3 = types.KeyboardButton("üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()

            case "üßæ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
                allUsers = users.find().sort("score", -1)

                bot.send_message(id, "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—ã–π–≥—Ä–∞–ª–∏ –±–æ—Ç–∞")
                bot.send_message(id, "‚Ññ | –£—á–∞—Å—Ç–Ω–∏–∫ | –ö–æ–ª-–≤–æ –∏–≥—Ä | –ö–æ–ª-–≤–æ –ø–æ–±–µ–¥")

                for index, user in enumerate(allUsers, start=1):
                    bot.send_message(id, str(index) + " | " + str(user["name"]) + " (@" + str(user["username"]) + ") | " + str(user["games"]) + " | " + str(user["score"]))
   
                    if index == 5:
                        break

            case "üßæ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä":      
                bot.send_message(id, "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä")

                statsUser = date.find_one({"id": id})

                # General
                if statsUser["games"] == 0 and statsUser["score"] == 0:
                    win_general = 0
                else:
                    win_general = statsUser["score"] / statsUser["games"] * 100

                # Darts
                if statsUser["games_darts"] == 0 and statsUser["score_darts"] == 0:
                    win_darts = 0
                else:
                    win_darts = statsUser["score_darts"] / statsUser["games_darts"] * 100
  
                # Number
                if statsUser["games_number"] == 0 and statsUser["score_number"] == 0:
                    win_number = 0
                else:
                    win_number = statsUser["score_number"] / statsUser["games_number"] * 100

                # Kosti
                if statsUser["games_kosti"] == 0 and statsUser["score_kosti"] == 0:
                    win_kosti = 0
                else:
                    win_kosti = statsUser["score_kosti"] / statsUser["games_kosti"] * 100

                # Bowling
                if statsUser["games_bowling"] == 0 and statsUser["score_bowling"] == 0:
                    win_bowling = 0
                else:
                    win_bowling = statsUser["score_bowling"] / statsUser["games_bowling"] * 100

                # Football
                if statsUser["games_football"] == 0 and statsUser["score_football"] == 0:
                    win_football = 0
                else:
                    win_football = statsUser["score_football"] / statsUser["games_football"] * 100

                # Basket
                if statsUser["games_basket"] == 0 and statsUser["score_basket"] == 0:
                    win_basket = 0
                else:
                    win_basket = statsUser["score_basket"] / statsUser["games_basket"] * 100

                # Moneta
                if statsUser["games_moneta"] == 0 and statsUser["score_moneta"] == 0:
                    win_moneta = 0
                else:
                    win_moneta = statsUser["score_moneta"] / statsUser["games_moneta"] * 100

                bot.send_message(id, "–ù–∞–∑–≤–∞–Ω–∏–µ  |  –ò–≥—Ä  |  –ü–æ–±–µ–¥  | Winrate")
                bot.send_message(id, "üéà –û–±—â–µ–µ - " + str(statsUser["games"]) + " - " + str(statsUser["score"]) + " - " + f'{win_general:.0f}' + "%")
                bot.send_message(id, "üéØ –î–∞—Ä—Ç—Å - " + str(statsUser["games_darts"]) + " - " + str(statsUser["score_darts"]) + " - " + f'{win_darts:.0f}' + "%")
                bot.send_message(id, "üé∞ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - " + str(statsUser["games_number"]) + " - " + str(statsUser["score_number"]) + " - " + f'{win_number:.0f}' + "%")
                bot.send_message(id, "üé≤ –ò–≥—Ä–∞ *–ö–æ—Å—Ç–∏* - " + str(statsUser["games_kosti"]) + " - " + str(statsUser["score_kosti"]) + " - " + f'{win_kosti:.0f}' + "%")
                bot.send_message(id, "üé≥ –ë–æ—É–ª–∏–Ω–≥ - " + str(statsUser["games_bowling"]) + " - " + str(statsUser["score_bowling"]) + " - " + f'{win_bowling:.0f}' + "%")
                bot.send_message(id, "‚öΩÔ∏è –§—É—Ç–±–æ–ª - " + str(statsUser["games_football"]) + " - " + str(statsUser["score_football"]) + " - " + f'{win_football:.0f}' + "%")
                bot.send_message(id, "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - " + str(statsUser["games_basket"]) + " - " + str(statsUser["score_basket"]) + " - " + f'{win_basket:.0f}' + "%")
                bot.send_message(id, "üü° –û—Ä–µ–ª & –†–µ—à–∫–∞ - " + str(statsUser["games_moneta"]) + " - " + str(statsUser["score_moneta"]) + " - " + f'{win_moneta:.0f}' + "%")

            # Horoscope
            case "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø":	
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–õ–µ–≤ ‚ôåÔ∏è")
                item2 = types.KeyboardButton("–¢–µ–ª–µ—Ü ‚ôâÔ∏è ")
                item3 = types.KeyboardButton("–û–≤–µ–Ω ‚ôàÔ∏è")
                item4 = types.KeyboardButton("–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôäÔ∏è")
                item5 = types.KeyboardButton("–†–∞–∫ ‚ôãÔ∏è")
                item6 = types.KeyboardButton("–î–µ–≤–∞ ‚ôçÔ∏è")
                item7 = types.KeyboardButton("–í–µ—Å—ã ‚ôéÔ∏è")
                item8 = types.KeyboardButton("–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôèÔ∏è")
                item9 = types.KeyboardButton("–°—Ç—Ä–µ–ª–µ—Ü ‚ôêÔ∏è")
                item10 = types.KeyboardButton("–ö–æ–∑–µ—Ä–æ–≥ ‚ôëÔ∏è")
                item11 = types.KeyboardButton("–í–æ–¥–æ–ª–µ–π ‚ôíÔ∏è")
                item12 = types.KeyboardButton("–†—ã–±—ã ‚ôìÔ∏è")
                item13 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1, item2, item3)
                markup.row(item4, item5, item6)
                markup.row(item7, item8, item9)
                markup.row(item10, item11, item12)
                markup.row(item13)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞", reply_markup = markup)

                updateUser()	            
            
            case "–õ–µ–≤ ‚ôåÔ∏è":
                url = "https://horo.mail.ru/prediction/leo/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text          
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–õ–µ–≤ - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–õ–µ–≤ - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()  

            case "–õ–µ–≤ - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/leo/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text         
                bot.send_message(id, today + " - *–õ–µ–≤* ‚ôåÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()

            case "–õ–µ–≤ - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/leo/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text         
                bot.send_message(id, tomorrow + " - *–õ–µ–≤* ‚ôåÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()           
            
            case "–¢–µ–ª–µ—Ü ‚ôâÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–¢–µ–ª–µ—Ü - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–¢–µ–ª–µ—Ü - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()     
            
            case "–¢–µ–ª–µ—Ü - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/taurus/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text         
                bot.send_message(id, today + " - *–¢–µ–ª–µ—Ü* ‚ôâÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()       
            
            case "–¢–µ–ª–µ—Ü - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/taurus/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text         
                bot.send_message(id, tomorrow + " - *–¢–µ–ª–µ—Ü* ‚ôâÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()        
            
            case "–û–≤–µ–Ω ‚ôàÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–û–≤–µ–Ω - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–û–≤–µ–Ω - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()

            case "–û–≤–µ–Ω - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/aries/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–û–≤–µ–Ω* ‚ôàÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()      

            case "–û–≤–µ–Ω - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/aries/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–û–≤–µ–Ω* ‚ôàÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()     

            case "–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôäÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–ë–ª–∏–∑–Ω–µ—Ü—ã - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–ë–ª–∏–∑–Ω–µ—Ü—ã - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser() 

            case "–ë–ª–∏–∑–Ω–µ—Ü—ã - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/gemini/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–ë–ª–∏–∑–Ω–µ—Ü—ã* ‚ôäÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()     

            case "–ë–ª–∏–∑–Ω–µ—Ü—ã - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/gemini/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–ë–ª–∏–∑–Ω–µ—Ü—ã* ‚ôäÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()      

            case "–†–∞–∫ ‚ôãÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–†–∞–∫ - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–†–∞–∫ - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()

            case "–†–∞–∫ - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/cancer/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–†–∞–∫* ‚ôãÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()       

            case "–†–∞–∫ - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/cancer/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–†–∞–∫* ‚ôãÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()        

            case "–î–µ–≤–∞ ‚ôçÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–î–µ–≤–∞ - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–î–µ–≤–∞ - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()

            case "–î–µ–≤–∞ - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/virgo/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–î–µ–≤–∞* ‚ôçÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()    

            case "–î–µ–≤–∞ - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/virgo/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–î–µ–≤–∞* ‚ôçÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()      

            case "–í–µ—Å—ã ‚ôéÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–í–µ—Å—ã - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–í–µ—Å—ã - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser() 

            case "–í–µ—Å—ã - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/libra/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–í–µ—Å—ã* ‚ôéÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()     

            case "–í–µ—Å—ã - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/libra/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–í–µ—Å—ã* ‚ôéÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()       

            case "–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôèÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–°–∫–æ—Ä–ø–∏–æ–Ω - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–°–∫–æ—Ä–ø–∏–æ–Ω - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()

            case "–°–∫–æ—Ä–ø–∏–æ–Ω - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/scorpio/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–°–∫–æ—Ä–ø–∏–æ–Ω* ‚ôèÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()      

            case "–°–∫–æ—Ä–ø–∏–æ–Ω - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/scorpio/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–°–∫–æ—Ä–ø–∏–æ–Ω* ‚ôèÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()      

            case "–°—Ç—Ä–µ–ª–µ—Ü ‚ôêÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–°—Ç—Ä–µ–ª–µ—Ü - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–°—Ç—Ä–µ–ª–µ—Ü - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser() 

            case "–°—Ç—Ä–µ–ª–µ—Ü - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/sagittarius/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–°—Ç—Ä–µ–ª–µ—Ü* ‚ôêÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()       

            case "–°—Ç—Ä–µ–ª–µ—Ü - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/sagittarius/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–°—Ç—Ä–µ–ª–µ—Ü* ‚ôêÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")        

                updateUser()

            case "–ö–æ–∑–µ—Ä–æ–≥ ‚ôëÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–ö–æ–∑–µ—Ä–æ–≥ - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–ö–æ–∑–µ—Ä–æ–≥ - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()   

            case "–ö–æ–∑–µ—Ä–æ–≥ - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/capricorn/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–ö–æ–∑–µ—Ä–æ–≥* ‚ôëÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()        

            case "–ö–æ–∑–µ—Ä–æ–≥ - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/capricorn/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–ö–æ–∑–µ—Ä–æ–≥* ‚ôëÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()        

            case "–í–æ–¥–æ–ª–µ–π ‚ôíÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–í–æ–¥–æ–ª–µ–π - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–í–æ–¥–æ–ª–µ–π - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()  

            case "–í–æ–¥–æ–ª–µ–π - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/aquarius/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–í–æ–¥–æ–ª–µ–π* ‚ôíÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()       

            case "–í–æ–¥–æ–ª–µ–π - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/aquarius/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–í–æ–¥–æ–ª–µ–π* ‚ôíÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()        

            case "–†—ã–±—ã ‚ôìÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–†—ã–±—ã - —Å–µ–≥–æ–¥–Ω—è")
                item2 = types.KeyboardButton("–†—ã–±—ã - –∑–∞–≤—Ç—Ä–∞")
                item3 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.", reply_markup = markup)

                updateUser()  

            case "–†—ã–±—ã - —Å–µ–≥–æ–¥–Ω—è":
                url = "https://horo.mail.ru/prediction/pisces/today"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, today + " - *–†—ã–±—ã* ‚ôìÔ∏è" +"\n\n" + lev, parse_mode = "Markdown")

                updateUser()     

            case "–†—ã–±—ã - –∑–∞–≤—Ç—Ä–∞":
                url = "https://horo.mail.ru/prediction/pisces/tomorrow"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")
                today = soup.find("span", class_="link__text").text
                tomorrow = soup.find("span", class_="link__text").text
                lev = soup.find("div", class_="article__item article__item_alignment_left article__item_html").text     
                bot.send_message(id, tomorrow + " - *–†—ã–±—ã* ‚ôìÔ∏è" + "\n\n" + lev, parse_mode = "Markdown")

                updateUser()																		                    
            
            case "üîô –ù–∞–∑–∞–¥":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–õ–µ–≤ ‚ôåÔ∏è")
                item2 = types.KeyboardButton("–¢–µ–ª–µ—Ü ‚ôâÔ∏è")
                item3 = types.KeyboardButton("–û–≤–µ–Ω ‚ôàÔ∏è")
                item4 = types.KeyboardButton("–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôäÔ∏è")
                item5 = types.KeyboardButton("–†–∞–∫ ‚ôãÔ∏è")
                item6 = types.KeyboardButton("–î–µ–≤–∞ ‚ôçÔ∏è")
                item7 = types.KeyboardButton("–í–µ—Å—ã ‚ôéÔ∏è")
                item8 = types.KeyboardButton("–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôèÔ∏è")
                item9 = types.KeyboardButton("–°—Ç—Ä–µ–ª–µ—Ü ‚ôêÔ∏è")
                item10 = types.KeyboardButton("–ö–æ–∑–µ—Ä–æ–≥ ‚ôëÔ∏è")
                item11 = types.KeyboardButton("–í–æ–¥–æ–ª–µ–π ‚ôíÔ∏è")
                item12 = types.KeyboardButton("–†—ã–±—ã ‚ôìÔ∏è")
                item13 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1, item2, item3)
                markup.row(item4, item5, item6)
                markup.row(item7, item8, item9)
                markup.row(item10, item11, item12)
                markup.row(item13)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞", reply_markup = markup)

                updateUser()			        
        
        # –§–£–ù–ö–¶–ò–ò       
            case "üíé –§—É–Ω–∫—Ü–∏–∏":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
                item2 = types.KeyboardButton("üåç –ü–æ–≥–æ–¥–∞")
                item3 = types.KeyboardButton("üé∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
                item4 = types.KeyboardButton("üé° –°—ã–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º")
                item5 = types.KeyboardButton("üìñ –í–∏–∫–∏")
                item6 = types.KeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø")
                item7 = types.KeyboardButton("üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.row(item1, item2)
                markup.row(item3, item4)
                markup.row(item5, item6)
                markup.row(item7)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()
          
            case "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏":          
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
                item2 = types.KeyboardButton("üåç –ü–æ–≥–æ–¥–∞")
                item3 = types.KeyboardButton("üé∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
                item4 = types.KeyboardButton("üé° –°—ã–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º")
                item5 = types.KeyboardButton("üìñ –í–∏–∫–∏")
                item6 = types.KeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø")
                item7 = types.KeyboardButton("üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.row(item1, item2)
                markup.row(item3, item4)
                markup.row(item5, item6)
                markup.row(item7)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()                
            
            case "üìñ –í–∏–∫–∏":
                bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: ")
                bot.register_next_step_handler(message, wiki)

                updateUser()
          
            case "üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üßæ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
                item2 = types.KeyboardButton("üíé –§—É–Ω–∫—Ü–∏–∏")
                item3 = types.KeyboardButton("üõ† –ü—Ä–æ—á–µ–µ")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id,  str(name) + ", —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup = markup)

                updateUser()   
          
            # –ö–£–†–° –í–ê–õ–Æ–¢        
            case "üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç")
                item2 = types.KeyboardButton("üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
                item3 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1, item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()      
          
            case "üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üíµ –î–æ–ª–ª–∞—Ä")
                item2 = types.KeyboardButton("üí∂ –ï–≤—Ä–æ")
                item3 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ö—É—Ä—Å –í–∞–ª—é—Ç")
                markup.row(item1, item2)
                markup.row(item3)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É üíµ üí∂", reply_markup = markup)

                updateUser()    
          
            case "üíµ –î–æ–ª–ª–∞—Ä":
                bot.send_message(id, "üíµ –î–æ–ª–ª–∞—Ä –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " + price_usd + " ‚ÇΩ")

                updateUser()
          
            case "üí∂ –ï–≤—Ä–æ":
                bot.send_message(id, "üí∂ –ï–≤—Ä–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " + price_euro + " ‚ÇΩ")

                updateUser()     
          
            case "üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏":	
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üíµ –î–æ–ª–ª–∞—Ä")
                item2 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üí∂ –ï–≤—Ä–æ")
                item3 = types.KeyboardButton("üíµ –î–æ–ª–ª–∞—Ä –≤ üí¥ –†—É–±–ª–∏")
                item4 = types.KeyboardButton("üí∂ –ï–≤—Ä–æ –≤ üí¥ –†—É–±–ª–∏")
                item5 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ö—É—Ä—Å –í–∞–ª—é—Ç")
                markup.row(item1, item3)
                markup.row(item2, item4)
                markup.row(item5)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()      
          
            case "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ö—É—Ä—Å –í–∞–ª—é—Ç":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç")
                item2 = types.KeyboardButton("üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
                item3 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1, item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()      
          
            case "üí¥ –†—É–±–ª–∏ –≤ üíµ –î–æ–ª–ª–∞—Ä":
                bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n" + price_usd + " ‚ÇΩ" + " = 1 USD")
                bot.register_next_step_handler(message, rubl_dollar)

                updateUser()      
          
            case "üí¥ –†—É–±–ª–∏ –≤ üí∂ –ï–≤—Ä–æ":
                bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n" + price_euro + " ‚ÇΩ" + " = 1 EURO")
                bot.register_next_step_handler(message, rubl_euro)

                updateUser()
          
            case "üíµ –î–æ–ª–ª–∞—Ä –≤ üí¥ –†—É–±–ª–∏":
                bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n1 USD = " + price_usd + " ‚ÇΩ")
                bot.register_next_step_handler(message, dollar_rubl)

                updateUser()
          
            case "üí∂ –ï–≤—Ä–æ –≤ üí¥ –†—É–±–ª–∏":
                bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n1 EURO = " + price_euro + " ‚ÇΩ")
                bot.register_next_step_handler(message, euro_rubl)

                updateUser()
          
            # –ü–û–ì–û–î–ê        
            case "üåç –ü–æ–≥–æ–¥–∞":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üåç –û–º—Å–∫")
                item2 = types.KeyboardButton("üåç –ú–æ—Å–∫–≤–∞")
                item3 = types.KeyboardButton("üåç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
                item4 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                markup.row(item4)
                bot.send_message(id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?", reply_markup = markup)        
          
                updateUser()

            # –û–ú–°–ö      
            case "üåç –û–º—Å–∫":
                url = "https://prognoz3.ru/—Ä–æ—Å—Å–∏—è/–æ–º—Å–∫–∞—è-–æ–±–ª–∞—Å—Ç—å/–ø–æ–≥–æ–¥–∞-–≤-–æ–º—Å–∫–µ"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")          
                time = soup.find("div", class_="b-weather_current_date").text          
                sunrise_time = soup.find("span", class_="sunrise_time").text
                sunset_time = soup.find("span", class_="sunset_time").text      
                temp = soup.find("span", class_="temperature").text
                note = soup.find("span", class_="note").text
                feelslike = soup.find("span", class_="feelslike").text
                precipitation = soup.find("span", class_="precipitation").text
                pressure = soup.find("span", class_="pressure").text
                humidity = soup.find("span", class_="humidity").text                   
                bot.send_message(id, "–ü–æ–≥–æ–¥–∞ –≤ –û–º—Å–∫–µ\n" + time + "\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:  " + str(temp) + " - " + str(note) + "\n" + str(feelslike) + "\n" + str(precipitation) + "\n" + str(pressure) + "\n" + str(humidity) + "\n–í–æ—Å—Ö–æ–¥ - " + str(sunrise_time) + "\n–ó–∞–∫–∞—Ç - " + str(sunset_time))     
          
                updateUser()

            # –ú–û–°–ö–í–ê        
            case "üåç –ú–æ—Å–∫–≤–∞":
                url = "https://prognoz3.ru/—Ä–æ—Å—Å–∏—è/–º–æ—Å–∫–æ–≤—Å–∫–∞—è-–æ–±–ª–∞—Å—Ç—å/–ø–æ–≥–æ–¥–∞-–≤-–º–æ—Å–∫–≤–µ"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")          
                time = soup.find("div", class_="b-weather_current_date").text       
                sunrise_time = soup.find("span", class_="sunrise_time").text
                sunset_time = soup.find("span", class_="sunset_time").text             
                temp = soup.find("span", class_="temperature").text
                note = soup.find("span", class_="note").text
                feelslike = soup.find("span", class_="feelslike").text
                precipitation = soup.find("span", class_="precipitation").text
                pressure = soup.find("span", class_="pressure").text
                humidity = soup.find("span", class_="humidity").text                   
                bot.send_message(id, "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n" + time + "\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:  " + str(temp) + " - " + str(note) + "\n" + str(feelslike) + "\n" + str(precipitation) + "\n" + str(pressure) + "\n" + str(humidity) + "\n–í–æ—Å—Ö–æ–¥ - " + str(sunrise_time) + "\n–ó–∞–∫–∞—Ç - " + str(sunset_time))        
          
                updateUser()

            # –ù–û–í–û–°–ò–ë–ò–†–°–ö       
            case "üåç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫":
                url = "https://prognoz3.ru/—Ä–æ—Å—Å–∏—è/–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è-–æ–±–ª–∞—Å—Ç—å/–ø–æ–≥–æ–¥–∞-–≤-–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ"
                request = requests.get(url)
                soup = BeautifulSoup(request.text, "html.parser")          
                time = soup.find("div", class_="b-weather_current_date").text       
                sunrise_time = soup.find("span", class_="sunrise_time").text
                sunset_time = soup.find("span", class_="sunset_time").text             
                temp = soup.find("span", class_="temperature").text
                note = soup.find("span", class_="note").text
                feelslike = soup.find("span", class_="feelslike").text
                precipitation = soup.find("span", class_="precipitation").text
                pressure = soup.find("span", class_="pressure").text
                humidity = soup.find("span", class_="humidity").text                   
                bot.send_message(id, "–ü–æ–≥–æ–¥–∞ –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ\n" + time + "\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:  " + str(temp) + " - " + str(note) + "\n" + str(feelslike) + "\n" + str(precipitation) + "\n" + str(pressure) + "\n" + str(humidity) + "\n–í–æ—Å—Ö–æ–¥ - " + str(sunrise_time) + "\n–ó–∞–∫–∞—Ç - " + str(sunset_time))      
          
                updateUser()

            # –†–ê–ù–î–û–ú–ù–û–ï –ß–ò–°–õ–û       
            case "üé∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üé≤ –û—Ç 0 –¥–æ 10")
                item2 = types.KeyboardButton("üé≤ –û—Ç 0 –¥–æ 100")
                item3 = types.KeyboardButton("üé≤ –û—Ç 0 –¥–æ 1000")
                item5 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                markup.row(item4)
                markup.row(item5)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω", reply_markup = markup)

                updateUser()      
          
            case "üé≤ –û—Ç 0 –¥–æ 10":
                bot.send_message(id, "*–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ -* " + str(random.randint(0,10)), parse_mode = "Markdown")     

                updateUser()

            case "üé≤ –û—Ç 0 –¥–æ 100":
                bot.send_message(id, "*–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ -* " + str(random.randint(0,100)), parse_mode = "Markdown")        
          
                updateUser()

            case "üé≤ –û—Ç 0 –¥–æ 1000":
                bot.send_message(id, "*–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ -* " + str(random.randint(0,1000)), parse_mode = "Markdown")       
          
                updateUser()

            # –°–´–ì–†–ê–¢–¨ –° –ë–û–¢–û–ú
            case "üé° –°—ã–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üé∞ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
                item2 = types.KeyboardButton("üé≤ –ò–≥—Ä–∞ *–ö–æ—Å—Ç–∏*")
                item3 = types.KeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥")
                item4 = types.KeyboardButton("‚öΩÔ∏è –§—É—Ç–±–æ–ª")
                item5 = types.KeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª")
                item6 = types.KeyboardButton("üü° –û—Ä–µ–ª & –†–µ—à–∫–∞")
                item7 = types.KeyboardButton("üéØ –î–∞—Ä—Ç—Å")
                item8 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1)
                markup.row(item2, item3, item4)
                markup.row(item5, item6, item7)
                markup.row(item8)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup = markup)

                updateUser()    
          
            case "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üé∞ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
                item2 = types.KeyboardButton("üé≤ –ò–≥—Ä–∞ *–ö–æ—Å—Ç–∏*")
                item3 = types.KeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥")
                item4 = types.KeyboardButton("‚öΩÔ∏è –§—É—Ç–±–æ–ª")
                item5 = types.KeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª")
                item6 = types.KeyboardButton("üü° –û—Ä–µ–ª & –†–µ—à–∫–∞")
                item7 = types.KeyboardButton("üéØ –î–∞—Ä—Ç—Å")
                item8 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1) 
                markup.row(item2, item3, item4)
                markup.row(item5, item6, item7)
                markup.row(item8)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup = markup)

                updateUser()
          
            # –û–†–ï–õ & –†–ï–®–ö–ê      
            case "üü° –û—Ä–µ–ª & –†–µ—à–∫–∞": 
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–û—Ä–µ–ª")
                item2 = types.KeyboardButton("–†–µ—à–∫–∞")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞ ?" , reply_markup = markup)			
                bot.register_next_step_handler(message, moneta)

                updateUser()
          
            # –î–ê–†–¢–°     
            case "üéØ –î–∞—Ä—Ç—Å":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –¥—Ä–æ—Ç–∏–∫ üéØ")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "üéØ –ö–∏–¥–∞–µ—Ç –¥—Ä–æ—Ç–∏–∫ - " + str(name) , reply_markup = markup)

                updateUser()      
          
            case "–ë—Ä–æ—Å–∏—Ç—å –¥—Ä–æ—Ç–∏–∫ üéØ":
                users.update_one(
                    {"id": id},
                    {"$inc": {"games": 1}}
                )

                date.update_one(
                    {"id": id},
                    {"$inc": {"games": 1, "games_darts": 1}}
                )

                ball = bot.send_dice(id, 'üéØ')
                sleep(5)    

                match ball.dice.value:
                    case 1:
                        bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –Ω–µ –ø–æ–ø–∞–ª")
                    case 2 | 3 | 4 | 5:
                        bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –ø–æ–ø–∞–ª –≤ " + str(ball.dice.value))
                    case 6:
                        bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –ø–æ–ø–∞–ª –≤ —è–±–ª–æ—á–∫–æ!")  

                sleep(0.5)
                bot.send_message(id, "üéØ –ö–∏–¥–∞–µ—Ç –¥—Ä–æ—Ç–∏–∫ –ë–û–¢")
                sleep(1.5)
                ball_two = bot.send_dice(id, 'üéØ')
                sleep(5)         

                match ball_two.dice.value:
                    case 1:
                        bot.send_message(id, "–ë–û–¢ –Ω–µ –ø–æ–ø–∞–ª")
                    case 2 | 3 | 4 | 5:
                        bot.send_message(id, "–ë–û–¢ –ø–æ–ø–∞–ª –≤ " + str(ball_two.dice.value))
                    case 6:
                        bot.send_message(id, "–ë–û–¢ –ø–æ–ø–∞–ª –≤ —è–±–ª–æ—á–∫–æ!")   
       
                sleep(0.5)
                bot.send_message(id, "‚è≥ –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(0.5)
                bot.send_message(id, "‚åõÔ∏è –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(0.5)

                if ball.dice.value > ball_two.dice.value:
                    users.update_one(
                        {"id": id},
                        {"$inc": {"score": 1}}
                    )

                    date.update_one(
                        {"id": id},
                        {"$inc": {"score": 1, "score_darts": 1}}
                    )

                    bot.send_message(id, "*–ü–æ–±–µ–¥–∏–ª - *" + str(name), parse_mode = "Markdown")
                    bot.send_message(id, "ü•≥")
                elif ball.dice.value == ball_two.dice.value:
                    bot.send_message(id, "*–ù–∏—á—å—è!*", parse_mode = "Markdown")
                    bot.send_message(id, "ü§∑‚Äç‚ôÇ")
                else:
                    bot.send_message(id, "üòë *–ü–æ–±–µ–¥–∏–ª –ë–û–¢*", parse_mode = "Markdown")
                    bot.send_message(id, "üòû")

                sleep(2)

                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –¥—Ä–æ—Ç–∏–∫ üéØ")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–°—ã–≥—Ä–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑?" , reply_markup = markup)
                
                updateUser() 
          
            # –ë–ê–°–ö–ï–¢–ë–û–õ     
            case "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ö–∏–Ω—É—Ç—å –º—è—á üèÄ")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "üèÄ –ö–∏–¥–∞–µ—Ç –º—è—á - " + str(name) , reply_markup = markup)

                updateUser()     
          
            case "–ö–∏–Ω—É—Ç—å –º—è—á üèÄ":
                users.update_one(
                    {"id": id},
                    {"$inc": {"games": 1}}
                )

                date.update_one(
                    {"id": id},
                    {"$inc": {"games": 1, "games_basket": 1}}
                )

                ball = bot.send_dice(id, 'üèÄ')
                sleep(5)  

                if ball.dice.value > 3:
                    name = message.from_user.first_name
                    bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –ø–æ–ø–∞–ª –≤ –∫–æ–ª—å—Ü–æ, –∏ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É " + str(ball.dice.value))
                    sleep(1.5)
                else:
                    bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è")

                bot.send_message(id, "üèÄ –ö–∏–¥–∞–µ—Ç –º—è—á –ë–û–¢")
                sleep(1.5)
                ball_two = bot.send_dice(id, 'üèÄ')
                sleep(5)     

                if ball_two.dice.value > 3:
                    bot.send_message(id, "–ë–û–¢ –ø–æ–ø–∞–ª –≤ –∫–æ–ª—å—Ü–æ, –∏ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É " + str(ball_two.dice.value))
                    sleep(1.5)
                else:
                    bot.send_message(id, "–ë–û–¢ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è")

                bot.send_message(id, "‚è≥ –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(1.5)
                bot.send_message(id, "‚åõÔ∏è –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
          
                if ball.dice.value > 3:
                    if ball_two.dice.value > 3:
                        if ball.dice.value > ball_two.dice.value:
                            users.update_one(
                                {"id": id},
                                {"$inc": {"score": 1}}
                            )

                            date.update_one(
                                {"id": id},
                                {"$inc": {"score": 1, "score_basket": 1}}
                            )

                            bot.send_message(id, "*–ü–æ–±–µ–¥–∏–ª - *" + str(name), parse_mode = "Markdown")
                            bot.send_message(id, "ü•≥")
                        elif ball.dice.value == ball_two.dice.value:
                            bot.send_message(id, "*–ù–∏—á—å—è!*", parse_mode = "Markdown")
                            bot.send_message(id, "ü§∑‚Äç‚ôÇ")
                        else:
                            bot.send_message(id, "üòë *–ü–æ–±–µ–¥–∏–ª –ë–û–¢*", parse_mode = "Markdown")
                            bot.send_message(id, "üòû")
                    else:
                        users.update_one(
                            {"id": id},
                            {"$inc": {"score": 1}}
                        )

                        date.update_one(
                            {"id": id},
                            {"$inc": {"score": 1, "score_basket": 1}}
                        )

                        bot.send_message(id, "*–ü–æ–±–µ–¥–∏–ª - *" + str(name), parse_mode="Markdown")
                        bot.send_message(id, "ü•≥")
                elif ball.dice.value < 3:
                    if ball_two.dice.value > 3:
                        bot.send_message(id, "üòë *–ü–æ–±–µ–¥–∏–ª –ë–û–¢*", parse_mode = "Markdown")
                        bot.send_message(id, "üòû")
                    else:
                        bot.send_message(id, "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ø–∞–ª. –ù–∏—á—å—è!")
                        bot.send_message(id, "ü§∑‚Äç‚ôÇ")
                else:
                    bot.send_message(id, "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ø–∞–ª. –ù–∏—á—å—è!")
                    bot.send_message(id, "ü§∑‚Äç‚ôÇ")    

                sleep(1)
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ö–∏–Ω—É—Ç—å –º—è—á üèÄ")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–°—ã–≥—Ä–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑?" , reply_markup = markup)

                updateUser()      
          
            # –§–£–¢–ë–û–õ        
            case "‚öΩÔ∏è –§—É—Ç–±–æ–ª":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ü–Ω—É—Ç—å –º—è—á ‚öΩÔ∏è")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "‚öΩÔ∏è –ü–∏–Ω–∞–µ—Ç –º—è—á - " + str(name) , reply_markup = markup)

                updateUser()      
          
            case "–ü–Ω—É—Ç—å –º—è—á ‚öΩÔ∏è":
                users.update_one(
                    {"id": id},
                    {"$inc": {"games": 1}}
                )

                date.update_one(
                    {"id": id},
                    {"$inc": {"games": 1, "games_football": 1}}
                )

                ball = bot.send_dice(id, '‚öΩÔ∏è')
                sleep(5)         

                if ball.dice.value > 2:
                    bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –ø–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞, –∏ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É " + str(ball.dice.value))
                    sleep(1.5)
                else:
                    bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è")
                    sleep(1.5)

                bot.send_message(id, "‚öΩÔ∏è –ü–∏–Ω–∞–µ—Ç –º—è—á –ë–û–¢")
                sleep(1.5)
                ball_two = bot.send_dice(id, '‚öΩÔ∏è')
                sleep(5)
          
                if ball_two.dice.value > 2:
                    bot.send_message(id, "–ë–û–¢ –ø–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞, –∏ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É " + str(ball_two.dice.value))
                    sleep(1.5)
                else:
                    bot.send_message(id, "–ë–û–¢ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è")

                sleep(0.5)
                bot.send_message(id, "‚è≥ –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(0.5)
                bot.send_message(id, "‚åõÔ∏è –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(0.5)  

                if ball.dice.value > 2:
                    if ball_two.dice.value > 2:
                        if ball.dice.value > ball_two.dice.value:
                            users.update_one(
                                {"id": id},
                                {"$inc": {"score": 1}}
                            )

                            date.update_one(
                                {"id": id},
                                {"$inc": {"score": 1, "score_football": 1}}
                            )

                            bot.send_message(id, "*–ü–æ–±–µ–¥–∏–ª - *" + str(name) , parse_mode = "Markdown")
                            bot.send_message(id, "ü•≥")
                        elif ball.dice.value == ball_two.dice.value:
                            bot.send_message(id, "*–ù–∏—á—å—è!*", parse_mode = "Markdown")
                            bot.send_message(id, "ü§∑‚Äç‚ôÇ")
                        else:
                            bot.send_message(id, "üòë *–ü–æ–±–µ–¥–∏–ª –ë–û–¢*", parse_mode = "Markdown")
                            bot.send_message(id, "üòû")
                    else:
                        users.update_one(
                            {"id": id},
                            {"$inc": {"score": 1}}
                        )

                        date.update_one(
                            {"id": id},
                            {"$inc": {"score": 1, "score_football": 1}}
                        )

                        bot.send_message(id, "*–ü–æ–±–µ–¥–∏–ª - *" + str(name), parse_mode = "Markdown")
                        bot.send_message(id, "ü•≥")
                elif ball.dice.value < 2:
                    if ball_two.dice.value > 2:
                        bot.send_message(id, "üòë *–ü–æ–±–µ–¥–∏–ª –ë–û–¢*", parse_mode = "Markdown")
                        bot.send_message(id, "üòû")
                    else:
                        bot.send_message(id, "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ø–∞–ª. –ù–∏—á—å—è!")
                        bot.send_message(id, "ü§∑‚Äç‚ôÇ")
                else:
                    bot.send_message(id, "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ø–∞–ª. –ù–∏—á—å—è!")
                    bot.send_message(id, "ü§∑‚Äç‚ôÇ")

                sleep(1.5)

                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ü–Ω—É—Ç—å –º—è—á ‚öΩÔ∏è")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–°—ã–≥—Ä–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑?" , reply_markup = markup)

                updateUser()   
          
            # –ò–ì–†–ê "–ë–û–£–õ–ò–ù–ì"        
            case "üé≥ –ë–æ—É–ª–∏–Ω–≥":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ë—Ä–æ—Å–∏—Ç—å —à–∞—Ä üé≥")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "üé≥ –ë—Ä–æ—Å–∞–µ—Ç —à–∞—Ä - " + str(name) , reply_markup = markup)     
          
                updateUser()

            case "–ë—Ä–æ—Å–∏—Ç—å —à–∞—Ä üé≥":
                users.update_one(
                    {"id": id},
                    {"$inc": {"games": 1}}
                )

                date.update_one(
                    {"id": id},
                    {"$inc": {"games": 1, "games_bowling": 1}}
                )

                ball = bot.send_dice(id, 'üé≥')
                sleep(5)

                match ball.dice.value:
                    case 1:
                        bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è")
                    case 2:
                        bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " —Å–±–∏–ª 1 –∫–µ–≥–ª—é")
                    case 3 | 4:
                        bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " —Å–±–∏–ª " + str(ball.dice.value) + " –∫–µ–≥–ª–∏")
                    case 5:
                        bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " —Å–±–∏–ª " + str(ball.dice.value) + " –∫–µ–≥–ª–µ–π")
                    case 6:
                        bot.send_message(id, "–ò–≥—Ä–æ–∫ " + str(name) + " –≤—ã–±–∏–ª STRIKE!!") 
           
                sleep(1.5)
                bot.send_message(id, "üé≥ –ë—Ä–æ—Å–∞–µ—Ç —à–∞—Ä –ë–û–¢")
                sleep(1.5)
                ball_two = bot.send_dice(id, 'üé≥')
                sleep(5)

                match ball_two.dice.value:
                    case 1:
                        bot.send_message(id, "–ë–û–¢ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è")
                    case 2:
                        bot.send_message(id, "–ë–û–¢ —Å–±–∏–ª 1 –∫–µ–≥–ª—é")
                    case 3 | 4:
                        bot.send_message(id, "–ë–û–¢ —Å–±–∏–ª " + str(ball_two.dice.value) + " –∫–µ–≥–ª–∏")
                    case 5:
                        bot.send_message(id, "–ë–û–¢ —Å–±–∏–ª " + str(ball_two.dice.value) + " –∫–µ–≥–ª–µ–π")
                    case 6:
                        bot.send_message(id, "–ë–û–¢ –≤—ã–±–∏–ª STRIKE!!")

                sleep(1)
                bot.send_message(id, "‚è≥ –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(1)
                bot.send_message(id, "‚åõÔ∏è –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(0.5)

                if ball.dice.value > ball_two.dice.value:
                    users.update_one(
                        {"id": id},
                        {"$inc": {"score": 1}}
                    )

                    date.update_one(
                        {"id": id},
                        {"$inc": {"score": 1, "score_bowling": 1}}
                    )

                    bot.send_message(id, "*–ü–æ–±–µ–¥–∏–ª - *" + str(name), parse_mode = "Markdown")
                    bot.send_message(id, "ü•≥")
                elif ball.dice.value == ball_two.dice.value:
                    bot.send_message(id, "*–ù–∏—á—å—è!*", parse_mode = "Markdown")
                    bot.send_message(id, "ü§∑‚Äç‚ôÇ")
                else:
                    bot.send_message(id, "üòë *–ü–æ–±–µ–¥–∏–ª –ë–û–¢*", parse_mode = "Markdown")
                    bot.send_message(id, "üòû")     
              
                sleep(2)

                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ë—Ä–æ—Å–∏—Ç—å —à–∞—Ä üé≥")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–°—ã–≥—Ä–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑?" , reply_markup = markup)

                updateUser()
          
            # –ò–ì–†–ê *–ö–û–°–¢–ò*      
            case "üé≤ –ò–≥—Ä–∞ *–ö–æ—Å—Ç–∏*":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ üé≤")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "üé≤ –ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ - " + str(name) , reply_markup = markup)

                updateUser()     
          
            case "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ üé≤":
                users.update_one(
                    {"id": id},
                    {"$inc": {"games": 1}}
                )

                date.update_one(
                    {"id": id},
                    {"$inc": {"games": 1, "games_kosti": 1}}
                )

                cube = bot.send_dice(id)
                sleep(5)
                bot.send_message(id, "–ò–≥—Ä–æ–∫—É " + str(name) + " –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - " + str(cube.dice.value))
                sleep(1.5)
                bot.send_message(id, "üé≤ –ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ –ë–û–¢")
                sleep(1.5)

                cube_two = bot.send_dice(id)
                sleep(5)
                bot.send_message(id, "–ë–û–¢ –≤—ã–±–∏–ª —á–∏—Å–ª–æ - " + str(cube_two.dice.value))
                sleep(1)
                bot.send_message(id, "‚è≥ –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(1)
                bot.send_message(id, "‚åõÔ∏è –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                sleep(2)        
              
                if cube.dice.value > cube_two.dice.value:
                    users.update_one(
                        {"id": id},
                        {"$inc": {"score": 1}}
                    )

                    date.update_one(
                        {"id": id},
                        {"$inc": {"score": 1, "score_kosti": 1}}
                    )

                    bot.send_message(id, "*–ü–æ–±–µ–¥–∏–ª - *" + str(name), parse_mode = "Markdown")
                    bot.send_message(id, "ü•≥")
                elif cube.dice.value == cube_two.dice.value:
                    bot.send_message(id, "*–ù–∏—á—å—è!*", parse_mode = "Markdown")
                    bot.send_message(id, "ü§∑‚Äç‚ôÇ")
                else:
                    bot.send_message(id, "*–ü–æ–±–µ–¥–∏–ª –ë–û–¢*", parse_mode = "Markdown")
                    bot.send_message(id, "üòû")     
              
                sleep(1)

                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ üé≤")
                item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–°—ã–≥—Ä–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑?" , reply_markup = markup)

                updateUser()
          
            # –£–ì–ê–î–ê–ô –ß–ò–°–õ–û      
            case "üé∞ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("–î–∞")
                item2 = types.KeyboardButton("–ù–µ—Ç")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º –≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ?\n–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã.\n–ë–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, –∞ –≤–∞–º –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ, —É –≤–∞—Å –±—É–¥–µ—Ç 5 –ø–æ–ø—ã—Ç–æ–∫", reply_markup = markup )        
          
                updateUser()

            case "–î–∞":
                global counter, random_number

                users.update_one(
                    {"id": id},
                    {"$inc": {"games": 1}}
                )

                date.update_one(
                    {"id": id},
                    {"$inc": {"games": 1, "games_number": 1}}
                )

                sleep(0.5)
                bot.send_message(id, "–û—Ç–ª–∏—á–Ω–æ. –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º")
                sleep(0.5)
                bot.send_message(id, "–ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ. –£ –≤–∞—Å 5 –ø–æ–ø—ã—Ç–æ–∫!")        
                random_number = random.randint(1, 10)
                counter = 5  
                sleep(0.5)     
              
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("1")
                item2 = types.KeyboardButton("2")
                item3 = types.KeyboardButton("3")
                item4 = types.KeyboardButton("4")
                item5 = types.KeyboardButton("5")
                item6 = types.KeyboardButton("6")
                item7 = types.KeyboardButton("7")
                item8 = types.KeyboardButton("8")
                item9 = types.KeyboardButton("9")
                item10 = types.KeyboardButton("10")     
                markup.row(item1, item2, item3)
                markup.row(item4, item5, item6)
                markup.row(item7, item8, item9)
                markup.row(item10)
                bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup = markup)
                bot.register_next_step_handler(message, number)

                updateUser()

            case "–ù–µ—Ç":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("üé∞ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
                item2 = types.KeyboardButton("üé≤ –ò–≥—Ä–∞ *–ö–æ—Å—Ç–∏*")
                item3 = types.KeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥")
                item4 = types.KeyboardButton("‚öΩÔ∏è –§—É—Ç–±–æ–ª")
                item5 = types.KeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª")
                item6 = types.KeyboardButton("üü° –û—Ä–µ–ª & –†–µ—à–∫–∞")
                item7 = types.KeyboardButton("üéØ –î–∞—Ä—Ç—Å")
                item8 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
                markup.row(item1) 
                markup.row(item2, item3, item4)
                markup.row(item5, item6, item7)
                markup.row(item8)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup = markup)

                updateUser()       
          
            # –û–¢–ß–ï–¢ –û –î–û–°–¢–ê–í–ö–ï –°–û–û–ë–©–ï–ù–ò–Ø "–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ò –£–õ–£–ß–®–ï–ù–ò–Ø"      
            case "–í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.row(item1)
                bot.send_message(id, "–£—Å–ø–µ—à–Ω–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!  üì¶", reply_markup = markup)
                chat_id = "1277445345"
                bot.send_message(chat_id, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç " + str(name) + " (@" + str(username) + " ) " + "\n\n" + up_text, reply_markup = markup)       
          
                updateUser()

            case "–•–æ—á—É –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å üìÑ":
                bot.send_message(id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —É–ª—É—á—à–µ–Ω–∏—è –≤ —á–∞—Ç! ‚§µÔ∏è")
                bot.register_next_step_handler(message, up_bot)

                updateUser()
          
            case "–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è":
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
                item1 = types.KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                item2 = types.KeyboardButton("üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è")
                item3 = types.KeyboardButton("üìç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.row(item1)
                markup.row(item2)
                markup.row(item3)
                bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)

                updateUser()            

            case _:
                bot.send_message(id, "üóø –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /start")

                updateUser()

def updateUser():
    users.update_one(
        {"id": id},
        {"$set": {"lastActive": str(lastActive)}}
    )

    checkID = users.find_one({"id": id})

    if not checkID:
        users.insert_one({
            "id" : id,
            "username" : username,
            "name" : name,
            "lastActive": str(lastActive),
            "games" : 0,
            "score": 0
        })

        date.insert_one({
            "id": id,
            "games": 0,
            "score": 0,

            "games_darts": 0,
            "score_darts": 0,

            "games_number": 0,
            "score_number": 0,

            "games_kosti": 0,
            "score_kosti": 0,

            "games_bowling": 0,
            "score_bowling": 0,

            "games_football": 0,
            "score_football": 0,

            "games_basket": 0,
            "score_basket": 0,

            "games_moneta": 0,
            "score_moneta": 0,
        })

def moneta(message):
    users.update_one(
        {"id": id},
        {"$inc": {"games": 1}}
    )

    date.update_one(
        {"id": id},
        {"$inc": {"games": 1, "games_moneta": 1}}
    )

    moneta = ["–û—Ä–µ–ª", "–†–µ—à–∫–∞"]
    moneta_random = random.choice(moneta)
    moneta_user = message.text
    stick = open("image/AnimatedSticker.tgs", "rb")
    bot.send_sticker(id, stick)
    sleep(3)
    bot.send_message(id, str(moneta_random))
    sleep(1)
      
    if moneta_random == moneta_user:
        users.update_one(
            {"id": id},
            {"$inc": {"score": 1}}
        )

        date.update_one(
            {"id": id},
            {"$inc": {"score": 1, "score_moneta": 1}}
        )

        bot.send_message(id, "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
        sleep(2)

        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item1 = types.KeyboardButton("üé∞ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
        item2 = types.KeyboardButton("üé≤ –ò–≥—Ä–∞ *–ö–æ—Å—Ç–∏*")
        item3 = types.KeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥")
        item4 = types.KeyboardButton("‚öΩÔ∏è –§—É—Ç–±–æ–ª")
        item5 = types.KeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª")
        item6 = types.KeyboardButton("üü° –û—Ä–µ–ª & –†–µ—à–∫–∞")
        item7 = types.KeyboardButton("üéØ –î–∞—Ä—Ç—Å")
        item8 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
        markup.row(item1) 
        markup.row(item2, item3, item4)
        markup.row(item5, item6, item7)
        markup.row(item8)
        bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup = markup)  
    else:
        bot.send_message(id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
        sleep(2)
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item1 = types.KeyboardButton("üé∞ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
        item2 = types.KeyboardButton("üé≤ –ò–≥—Ä–∞ *–ö–æ—Å—Ç–∏*")
        item3 = types.KeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥")
        item4 = types.KeyboardButton("‚öΩÔ∏è –§—É—Ç–±–æ–ª")
        item5 = types.KeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª")
        item6 = types.KeyboardButton("üü° –û—Ä–µ–ª & –†–µ—à–∫–∞")
        item7 = types.KeyboardButton("üéØ –î–∞—Ä—Ç—Å")
        item8 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
        markup.row(item1) 
        markup.row(item2, item3, item4)
        markup.row(item5, item6, item7)
        markup.row(item8)
        bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup = markup) 

def dollar_rubl(message):
    number = message.text
    try:
        number = int(message.text)
        result = int(number) / float(price_usd)
        bot.send_message(id, "*–†–µ–∑—É–ª—å—Ç–∞—Ç -* " + str('{:.2f}'.format(result)) + " *USD*", parse_mode = "Markdown")

        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item1 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üíµ –î–æ–ª–ª–∞—Ä")
        item2 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üí∂ –ï–≤—Ä–æ")
        item3 = types.KeyboardButton("üíµ –î–æ–ª–ª–∞—Ä –≤ üí¥ –†—É–±–ª–∏")
        item4 = types.KeyboardButton("üí∂ –ï–≤—Ä–æ –≤ üí¥ –†—É–±–ª–∏")
        item5 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ö—É—Ä—Å –í–∞–ª—é—Ç")
        markup.row(item1, item3)
        markup.row(item2, item4)
        markup.row(item5)
        bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)
    except:
        bot.send_message(id, "–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏.")
        bot.register_next_step_handler(message, dollar_rubl)

def rubl_dollar(message):
    number = message.text
    try:
        number = int(message.text)
        result = int(number) / float(price_usd)
        bot.send_message(id, "*–†–µ–∑—É–ª—å—Ç–∞—Ç -* " + str('{:.2f}'.format(result)) + " *USD*", parse_mode = "Markdown")

        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item1 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üíµ –î–æ–ª–ª–∞—Ä")
        item2 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üí∂ –ï–≤—Ä–æ")
        item3 = types.KeyboardButton("üíµ –î–æ–ª–ª–∞—Ä –≤ üí¥ –†—É–±–ª–∏")
        item4 = types.KeyboardButton("üí∂ –ï–≤—Ä–æ –≤ üí¥ –†—É–±–ª–∏")
        item5 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ö—É—Ä—Å –í–∞–ª—é—Ç")
        markup.row(item1, item3)
        markup.row(item2, item4)
        markup.row(item5)
        bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)
    except:
        bot.send_message(id, "–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏.")
        bot.register_next_step_handler(message, rubl_dollar)

def euro_rubl(message):
    number = message.text
    try:
        number = int(message.text)
        result = int(number) * float(price_euro)
        bot.send_message(id, "*–†–µ–∑—É–ª—å—Ç–∞—Ç -* " + str('{:.2f}'.format(result)) + " *‚ÇΩ*", parse_mode = "Markdown")

        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item1 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üíµ –î–æ–ª–ª–∞—Ä")
        item2 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üí∂ –ï–≤—Ä–æ")
        item3 = types.KeyboardButton("üíµ –î–æ–ª–ª–∞—Ä –≤ üí¥ –†—É–±–ª–∏")
        item4 = types.KeyboardButton("üí∂ –ï–≤—Ä–æ –≤ üí¥ –†—É–±–ª–∏")
        item5 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ö—É—Ä—Å –í–∞–ª—é—Ç")
        markup.row(item1, item3)
        markup.row(item2, item4)
        markup.row(item5)
        bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)
    except:
        bot.send_message(id, "–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏.")
        bot.register_next_step_handler(message, rubl_dollar)


def rubl_euro(message):
    number = message.text
    try:
        number = int(number)
        result = int(number) / float(price_euro)
        bot.send_message(id, "*–†–µ–∑—É–ª—å—Ç–∞—Ç -* " + str('{:.2f}'.format(result)) + " *EURO*", parse_mode = "Markdown")

        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item1 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üíµ –î–æ–ª–ª–∞—Ä")
        item2 = types.KeyboardButton("üí¥ –†—É–±–ª–∏ –≤ üí∂ –ï–≤—Ä–æ")
        item3 = types.KeyboardButton("üíµ –î–æ–ª–ª–∞—Ä –≤ üí¥ –†—É–±–ª–∏")
        item4 = types.KeyboardButton("üí∂ –ï–≤—Ä–æ –≤ üí¥ –†—É–±–ª–∏")
        item5 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ö—É—Ä—Å –í–∞–ª—é—Ç")
        markup.row(item1, item3)
        markup.row(item2, item4)
        markup.row(item5)
        bot.send_message(id, "üö© –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = markup)
    except:
        bot.send_message(id, "–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏.")
        bot.register_next_step_handler(message, rubl_dollar)

def up_bot(message):
	global up_text
	up_text = message.text
	markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
	item1 = types.KeyboardButton("–í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ")
	item2 = types.KeyboardButton("–•–æ—á—É –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å üìÑ")
	item3 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è")
	markup.row(item1)
	markup.row(item2)
	markup.row(item3)
	bot.send_message(id, "‚è≥ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ...")
	sleep(1)
	bot.send_message(id, "‚åõÔ∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ...")
	sleep(1)
	bot.send_message(id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ. \n\n" + str(up_text), reply_markup = markup)

def number(message):
    global counter, random_number
    number_user = message.text
    try:
        number_user = int(number_user)

        if number_user < 1 or number_user > 10:
            bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10")
            bot.register_next_step_handler(message, number)
        else:
            if number_user == random_number:
                users.update_one(
                    {"id": id},
                    {"$inc": {"score": 1}}
                )

                date.update_one(
                    {"id": id},
                    {"$inc": {"score": 1, "score_number": 1}}
                )

                sleep(0.5)
                bot.send_message(id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!")
                sleep(0.5)
                bot.send_message(id, "–ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ - " + str(random_number))

                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–î–∞")
                item2 = types.KeyboardButton("–ù–µ—Ç")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ? üòä", reply_markup = markup)
            elif counter > 1:
                counter -= 1
                sleep(0.5)
                bot.send_message(id, "–ù–µ–≤–µ—Ä–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: " + str(counter))
                bot.register_next_step_handler(message, number)
                return
            else:
                sleep(0.5)
                bot.send_message(id, "–£–≤—ã, –Ω–æ –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ( ‚òπÔ∏è")
                sleep(0.5)
                bot.send_message(id, "–ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ - " + str(random_number))

                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("–î–∞")
                item2 = types.KeyboardButton("–ù–µ—Ç")
                markup.row(item1)
                markup.row(item2)
                bot.send_message(id, "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ? üòä", reply_markup = markup)
    except:
        bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–∏—Ñ—Ä—É!")
        bot.register_next_step_handler(message, number)


def wiki(message):
	global search
	wikipedia.set_lang("RU")
	text = message.text
	search = wikipedia.search(text, results = 6)
	if len(search) == 0:
		bot.send_message(id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É  *'{text}'*  –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! ", parse_mode = "Markdown")
		markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
		item1 = types.KeyboardButton("üìñ –í–∏–∫–∏")
		item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
		markup.row(item1)
		markup.row(item2)
		bot.send_message(id, "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑?", reply_markup= markup)
	else:
		for index, result in enumerate(search, start = 0):
			bot.send_message(id, f"{index}) {result}")

		markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
		item1 = types.KeyboardButton("0")
		item2 = types.KeyboardButton("1")
		item3 = types.KeyboardButton("2")
		item4 = types.KeyboardButton("3")
		item5 = types.KeyboardButton("4")
		item6 = types.KeyboardButton("5")
		markup.row(item1, item2)
		markup.row(item3, item4)
		markup.row(item5, item6)
		bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", reply_markup = markup)
		bot.register_next_step_handler(message, wiki_result)

def wiki_result(message):
	number = message.text
	try:
		number = int(message.text)
		if number < 0 or number > 5:
			bot.send_message(id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. \n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 5")
			bot.register_next_step_handler(message, wiki_result)
		else:
			try:
				wikipedia.set_lang("RU")
				text = wikipedia.summary(search[int(number)])
				bot.send_message(id, str(text))
			except:
				bot.send_message(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å!")
			sleep(2)
			markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
			item1 = types.KeyboardButton("üìñ –í–∏–∫–∏")
			item2 = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –§—É–Ω–∫—Ü–∏–∏")
			markup.row(item1)
			markup.row(item2)
			bot.send_message(id, "–•–æ—Ç–∏—Ç–µ –µ—â–µ –Ω–∞–π—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å?", reply_markup= markup)
	except:
		bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
		bot.register_next_step_handler(message, wiki_result)

bot.infinity_polling()